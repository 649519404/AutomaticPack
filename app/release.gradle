import java.util.zip.ZipEntry
import java.util.zip.ZipOutputStream

ext {
    BASE = "legu/"
    JAR = rootDir.getPath() + "/legu/ms-shield.jar"
    SIGN_JAR = rootDir.getPath() + "/legu/apksigner.jar"
    NAME = "AKID20CJm9RLkvqaAdPrdFoBB0fPuA3nR2Vq"//腾讯乐固AppId
    PASSWORD = "Qgn5HNMCqFQV7VnvqVw71oOlZ7VfdM58"//腾讯乐固AppKey
    KEY_PATH = "automaticPack.jks" //密钥路径
    KEY_PASSWORD = "111111" //密钥密码
    ALIAS = "autoPack" //密钥别名
    ALIAS_PASSWORD = "111111" //别名密码
    OUTPUT_PATH = buildDir.getPath() + "/outputs/release/" //加固后所有apk的保存路径
    CHANNEL_CONFIG = BASE + "channel/"//保存渠道配置
    OUTPUT_PATH_LINUX = "/home/apk/"
}

class ApkFile {
    String channel
    File file
}

/**
 * 查找所有apk
 * @param buildType release 或者 debug
 * @return ArrayList <ApkFile>
 */
def findApkFiles(String buildType) {
    println "findApkFiles buildType: " + buildType

    File apkDir = new File(buildDir.getPath() + "/outputs/apk")
    File[] channelDirs = apkDir.listFiles()
    println apkDir.getAbsolutePath()
    List<ApkFile> apkFiles = new ArrayList<>()
    for (int i = 0; i < channelDirs.length; i++) {
        File channelDir = channelDirs[i]
        ApkFile apkFile = new ApkFile()
        apkFile.channel = channelDir.name

        File[] files = new File(channelDir, "/" + buildType).listFiles()

        if (files == null || files.length == 0) {
            continue
        }
        for (int j = 0; j < files.length; j++) {
            File lastFile = files[j]
            if (!lastFile.name.endsWith(".apk")) {
                continue
            }

            apkFile.file = lastFile
            apkFiles.add(apkFile)
        }

    }

    return apkFiles
}


def zipalignApk(File output) {
    println "*************** zipalign优化开始 ***************"
    File[] files = output.listFiles()
    if (files == null || files.length == 0) {
        return
    }
    File zipalign = new File(output.getParent() + "/zipalign")
    if (zipalign.exists()) {
        if (!zipalign.delete()) {
            throw new RuntimeException("delete zipalignOutputDir failure!")
        }
    }

    if (!zipalign.mkdirs()) {
        throw new RuntimeException("make zipalignOutputDir failure!")
    }

    for (int i = 0; i < files.length; i++) {
        File leguApk = files[i]

        if (!leguApk.name.endsWith(".apk")) {
            continue
        }
        println leguApk.getAbsolutePath()
        exec {
//            java -jar apksigner.jar sign  --ks key.jks  --ks-key-alias releasekey  --ks-pass pass:pp123456  --key-pass pass:pp123456  --out output.apk  input.apk
            if (isWindows()) {
                commandLine "powershell", rootDir.getPath() + "/legu/zipalign", "-v", "-p", "4", leguApk.getPath(), zipalign.getPath() + "/" + leguApk.getName()
            } else {
                commandLine "/opt/android-sdk-linux/build-tools/27.0.3/zipalign", "-v", "-p", "4", leguApk.getPath(), zipalign.getPath() + "/" + leguApk.getName()
            }

        }
        println "*************** zipalign优化结束 ***************"

    }
}
/**
 * 查找所有apk
 * @param output
 */
def signApk(File output) {
    println "*************** 开始签名 ***************"

    File[] files = output.listFiles()
    if (files == null || files.length == 0) {
        return
    }
    File signer = new File(output.getParent() + "/signer")

    if (signer.exists()) {
        if (!signer.delete()) {
            throw new RuntimeException("delete signerOutputDir failure!")
        }
    }

    if (!signer.mkdirs()) {
        throw new RuntimeException("make signerOutputDir failure!")
    }
    for (int i = 0; i < files.length; i++) {
        File zApk = files[i]

        if (!zApk.name.endsWith(".apk")) {
            continue
        }
        println zApk.getAbsolutePath()

        exec {
//            java -jar apksigner.jar sign  --ks key.jks  --ks-key-alias releasekey  --ks-pass pass:pp123456  --key-pass pass:pp123456  --out output.apk  input.apk
            if (isWindows()) {
                commandLine "powershell", "java", "-jar", SIGN_JAR, "sign", "--ks", KEY_PATH, "--ks-key-alias", ALIAS, "--ks-pass", "pass:" + KEY_PASSWORD, "--key-pass", "pass:" + KEY_PASSWORD, "--out", signer.getPath() + "/" + zApk.getName(), zApk.getPath()

            } else {
                commandLine "java", "-jar", SIGN_JAR, "sign", "--ks", KEY_PATH, "--ks-key-alias", ALIAS, "--ks-pass", "pass:" + KEY_PASSWORD, "--key-pass", "pass:" + KEY_PASSWORD, "--out", signer.getPath() + "/" + zApk.getName(), zApk.getPath()

            }
        }

        println "*************** 签名结束 ***************"
    }

}


def isWindows() {
    return org.gradle.internal.os.OperatingSystem.current().isWindows()
}
/**
 * 乐固加固
 * @param apk 加固的原始apk File
 * @param outputPath 输出目录
 * @param channel 原始渠道(baidu,yyb,...)
 */
def reinforce(apk, outputPath, channel) {

    println "reinforce apk:" + apk
    println "reinforce apk:" + channel

    //jiagu.db中缓存了多渠道信息，如果不删除会合并到当前多渠道配置
    def shield = new File(JAR)
    if (!shield.exists()) {
        throw new RuntimeException("jar not exists!")
    }
    println NAME
    println PASSWORD
    exec {
        if (isWindows()) {
            commandLine "powershell", "java -jar", JAR, "-sid", NAME, "-skey", PASSWORD, "-uploadPath", apk, "-downloadPath", outputPath
        } else {
            commandLine "java", "-Dfile.encoding=utf-8", "-jar", shield.getAbsolutePath(), "-sid", NAME, "-skey", PASSWORD, "-uploadPath", apk, "-downloadPath", outputPath

        }

    }
}

/**
 * 删除一些临时文件
 * @param outputDir apk保存目录
 */
def filterApk(File outputDir) {
    println "*************** filter apk ***************"

    File[] files = outputDir.listFiles()
    for (int i = 0; i < files.length; i++) {
        File file = files[i]
        String fileName = file.getName()

        if (fileName.endsWith("jiagu_sign.apk") || fileName.endsWith("temp.apk")
                || !fileName.endsWith("_sign.apk")) {
            file.delete()
        }
    }
}

/**
 * 修改所有apk文件名
 * @param outputDir apk保存目录
 */
def renameApk(File outputDir) {
    println "*************** rename apk ***************"

    File[] files = outputDir.listFiles()
    if (files == null || files.length == 0) {
        return
    }
    println outputDir.getAbsolutePath()
    for (int i = 0; i < files.length; i++) {
        File file = files[i]
        String fileName = file.getName()

        String[] prefixArr = fileName.split("-")
        String[] suffixArr = fileName.split("_")

        String rename = prefixArr[0] + "-" + prefixArr[1] +
                "-" + (i + 1) + "-" + suffixArr[suffixArr.length - 2] + ".apk"
        file.renameTo(file.getParent() + "/" + rename)

        println "rename apk: " + fileName + " --> " + rename
    }
    return files[0]
}

/**
 * zip压缩apk保存目录，生成 build/outputs/release/pccb-x.x.x.zip
 * @param outputDir apk保存目录
 */
def compressDir(File outputDir) {
    println "*************** compress apk output dir ***************"

    File zipFile = new File(outputDir.getParentFile().getParent() + "/" + outputDir.getParentFile().getName() + ".zip")
    if (zipFile.exists()) {
        zipFile.delete()
    }

    ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(zipFile))
    File[] files = outputDir.listFiles()
    if (files == null || files.length == 0) {
        return
    }
    for (int i = 0; i < files.length; i++) {
        File file = files[i]

        byte[] bf = new byte[8192]
        FileInputStream fis = new FileInputStream(file)
        zos.putNextEntry(new ZipEntry(file.getName()))

        int len
        while ((len = fis.read(bf)) > 0) {
            zos.write(bf, 0, len)
        }
        zos.flush()
        fis.close()
    }

    zos.close()
    return zipFile.getAbsolutePath()
}

//构建发布到生产环境的所有渠道apk,生成压缩文件 pccb-x.x.x.zip
task packageRelease {
//    def curPath =System.getProperty("user.dir") ;
//    println "curPath:"+curPath;
//
//    println "projectDir:"+projectDir;
//    println "rootDir:"+rootDir;
//    println "buildDir:"+buildDir;

    dependsOn("assembleRelease")

    doLast {
        List<ApkFile> apkFiles = findApkFiles("release")
        if (apkFiles.size() == 0) {
            throw new RuntimeException("no apk files has found!")
        }


        String[] nameSlice = apkFiles.get(0).file.name.split("-")
        File outputDir = new File(OUTPUT_PATH + nameSlice[0] + "/legu")
        File outputDirLinux

        println outputDir.getPath()
        if (outputDir.exists()) {
            if (!outputDir.delete()) {
                throw new RuntimeException("delete outputDir failure!")
            }
        }

        if (!outputDir.mkdirs()) {
            throw new RuntimeException("make outputDir failure!")
        }
        println "*************** 开始加固 ***************"
        for (int i = 0; i < apkFiles.size(); i++) {
            ApkFile apkFile = apkFiles.get(i)
            reinforce(apkFile.file.getAbsolutePath(), outputDir.getAbsolutePath(), apkFile.channel)
        }
        println "*************** 加固结束 ***************"
        zipalignApk(new File(outputDir.getAbsolutePath()))
        signApk(new File(outputDir.getParentFile().getAbsolutePath() + "/zipalign"))

//        filterApk(outputDir)
        File defaultApk = renameApk(new File(outputDir.getParentFile().getAbsolutePath() + "/signer"))
        String fileName = compressDir(new File(outputDir.getParentFile().getAbsolutePath() + "/signer"))
        if (IN_JENKINS) {
            outputDirLinux = new File(OUTPUT_PATH_LINUX + nameSlice[0])
            if (!outputDirLinux.exists()) {
                if (!outputDirLinux.mkdirs()) {
                    throw new RuntimeException("make outputDirLinux failure!")
                }
            }
            copy{
                from defaultApk
                into outputDirLinux.getAbsolutePath() + "/"
                rename {
                    String srcFileName ->
                        "jmtapp.apk"
                }
            }
            copy {
                from file(fileName)
                into outputDirLinux.getAbsolutePath() + "/"
            }
        }

    }
}